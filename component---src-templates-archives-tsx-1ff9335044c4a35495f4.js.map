{"version":3,"file":"component---src-templates-archives-tsx-1ff9335044c4a35495f4.js","mappings":"+IA8BA,IAlBgC,SAACA,GAC/B,IAAMC,EAASD,EAAMC,OACrB,OACE,uBAAKC,UAAU,eACb,wBACEA,UAAU,SACVC,MAAOF,EAAOG,IACdC,QAAS,kBAAMC,EAAAA,EAAAA,IAAGL,EAAOG,OAEzB,uBAAKG,IAAKN,EAAOO,UAAWC,IAAKR,EAAOS,QACxC,4BAAOT,EAAOS,QAEfV,EAAMW,MAAQ,qBAAGT,UAAU,SAAQU,EAAAA,EAAAA,IAAQZ,EAAMW,OACjDX,EAAMa,S,6ECvBPC,EAAmC,CACvCC,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,KAAM,IACNC,KAAM,KACNC,KAAM,KACNC,MAAO,KACPC,KAAM,KACNC,KAAM,KACNC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,UAAW,KACXC,WAAY,KACZC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,eAAgB,KAChBC,eAAgB,KAChBC,kBAAmB,MACnBC,qBAAsB,KACtBC,eAAgB,KAChBC,SAAU,KACVC,gBAAiB,KACjBC,KAAM,KACNC,UAAW,KACXC,MAAO,KACPC,KAAM,KACNC,UAAW,KACXC,MAAO,KACPC,SAAU,M,UCXZ,EAboC,SAAC,GAAiB,IAAfC,EAAe,EAAfA,KAAM5C,EAAS,EAATA,GAC3C,OAAM4C,GAAAA,MAAQA,GAAAA,EAAMC,KAElB,gBAAC,EAAAC,KAAD,CACElD,UAAU,cACVmD,GAAI/C,GAAE,cAAqBgD,EAAAA,EAAAA,IAAOJ,EAAKC,MAAM,GAC7CI,OAAQjD,EAAK,SAAW,SDqB9B,SAAgBkD,GAAD,OAA2B1C,EAAS0C,EAAMC,MAAM,GAAI,KAAO,GCnBnEC,CAASR,EAAKM,OALjB,IAK0BN,EAAKC,MAPC,O,iECoBpC,IApBsC,SAACnD,GACrC,IAEI2D,EAFEC,GAAUC,EAAAA,EAAAA,KAQhB,OAJEF,EAH+B,WAAjBC,EAAQE,KAGd,sBAAsBF,EAAQG,aAAjC,IAAiDH,EAAQI,YAAzD,WAA+EhE,EAAMiE,OAElF,sBAAsBL,EAAQM,MAAjC,IAA0CN,EAAQO,KAAlD,gBAAsEnE,EAAMiE,OAGjF,qBACE/D,WAAWkE,EAAAA,EAAAA,GAAK,oBAAqBpE,EAAME,WAC3CmE,KAAMV,EACNJ,OAAO,UAENvD,EAAMsE,KAAMC,EAAAA,EAAAA,IAAUvE,EAAMiE,OAAQjE,EAAMsE,KAA1C,IAAqDtE,EAAMiE,U,kICpBnD,SAASO,EAAUxE,GAChC,OACE,gBAAC,IAAD,CAAQE,UAAU,aAChB,uBAAKA,UAAU,6BACb,2BACGF,EAAMkD,KAAKuB,mBAAmBC,MAAMC,KAAI,YAAmB,IAAhBC,EAAgB,EAAhBA,KAC1C,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAWD,MAAAA,OAAH,EAAGA,EAAMC,SAEvB,OACE,uBAAK3E,UAAU,OAAO4E,IAAKF,EAAKX,QAC9B,gBAAC,IAAD,CACEhE,OAAQ2E,EAAK3E,OACbU,KAAMiE,EAAKG,UACXlE,MAAO,gBAAC,IAAD,CAAWoD,OAAQW,EAAKX,WAEjC,uBAAK/D,UAAU,aACb,gBAAC,IAAD,CAAUgD,KAAM2B,IAChB,gBAAC,EAAAzB,KAAD,CAAMlD,UAAU,QAAQmD,GAAE,WAAauB,EAAKX,QACzCW,EAAKzE","sources":["webpack://rwasm.github.io/./src/components/author/index.tsx","webpack://rwasm.github.io/./src/utils/emoji.ts","webpack://rwasm.github.io/./src/components/category/index.tsx","webpack://rwasm.github.io/./src/components/issues_num/index.tsx","webpack://rwasm.github.io/./src/templates/archives.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { go, fmtDate } from '@utils/tools';\n\nimport './index.scss';\n\ninterface AuthorProps {\n  author: any;\n  date?: Date;\n  extra?: React.ReactNode;\n}\n\nconst Author: FC<AuthorProps> = (props) => {\n  const author = props.author;\n  return (\n    <div className=\"author-info\">\n      <span\n        className=\"author\"\n        title={author.url}\n        onClick={() => go(author.url)}\n      >\n        <img src={author.avatarUrl} alt={author.login} />\n        <span>{author.login}</span>\n      </span>\n      {props.date && <i className=\"date\">{fmtDate(props.date)}</i>}\n      {props.extra}\n    </div>\n  );\n};\n\nexport default Author;\n","// https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md\n\nconst emojiMap: Record<string, string> = {\n  zap: '⚡',\n  gear: '⚙️',\n  beer: '🍺',\n  star: '⭐',\n  fire: '🔥',\n  tada: '🎉',\n  ninja: '🥷',\n  mega: '📣',\n  crab: '🦀',\n  rocket: '🚀',\n  warning: '⚠️',\n  unicorn: '🦄',\n  lobster: '🦞',\n  cyclone: '🌀',\n  rainbow: '🌈',\n  computer: '💻',\n  nail_care: '💅',\n  sunglasses: '😎',\n  see_no_evil: '🙈',\n  crystal_ball: '🔮',\n  monocle_face: '🧐',\n  speech_balloon: '💬',\n  exploding_head: '🤯',\n  hammer_and_wrench: '🛠️',\n  globe_with_meridians: '🌐',\n  page_facing_up: '📄',\n  thinking: '🤔',\n  sparkling_heart: '💖',\n  boom: '💥',\n  collision: '💥',\n  anger: '💢',\n  book: '📖',\n  open_book: '📖',\n  books: '📚',\n  game_die: '🎲'\n}\n\nexport default (emoji: string): string => emojiMap[emoji.slice(1, -1)] || '';\n\n\n// -----------------------------------------\n// THUMBS_UP\n// Represents the :+1: emoji.\n\n// THUMBS_DOWN\n// Represents the :-1: emoji.\n\n// LAUGH\n// Represents the :laugh: emoji.\n\n// HOORAY\n// Represents the :hooray: emoji.\n\n// CONFUSED\n// Represents the :confused: emoji.\n\n// HEART\n// Represents the :heart: emoji.\n\n// ROCKET\n// Represents the :rocket: emoji.\n\n// EYES\n// Represents the :eyes: emoji.","import React, { FC } from 'react';\nimport { Link, navigate } from 'gatsby';\n\nimport getEmoji from '@utils/emoji';\nimport { fmtURI } from '@utils/tools';\n\nimport './index.scss';\n\ninterface CategoryProps {\n  data: any;\n  go?: string;\n}\n\nconst Category: FC<CategoryProps> = ({ data, go }) => {\n  if (!(data && data?.name)) return null;\n  return (\n    <Link\n      className=\"gg-category\"\n      to={go ? go : `/category/${fmtURI(data.name, true)}`}\n      target={go ? '_blank' : '_self'}\n    >\n      {getEmoji(data.emoji)} {data.name}\n    </Link>\n  );\n};\n\nexport default Category;\n","import React, { FC } from 'react';\nimport clsx from 'clsx';\n\nimport { fmtIssues } from '@utils/tools';\nimport useRgd from '@hooks/useRgd';\n\nimport './index.scss';\n\ninterface IssuesNumProps {\n  number: number;\n  len?: number;\n  className?: string;\n}\n\nconst IssuesNum: FC<IssuesNumProps> = (props) => {\n  const rgdData = useRgd();\n  const isIssue = rgdData.type === 'issues';\n  let _link;\n  if (isIssue) {\n    _link = `https://github.com/${rgdData.issues_owner}/${rgdData.issues_repo}/issues/${props.number}`;\n  } else {\n    _link = `https://github.com/${rgdData.owner}/${rgdData.repo}/discussions/${props.number}`;\n  }\n  return (\n    <a\n      className={clsx('number issues-num', props.className)}\n      href={_link}\n      target=\"_blank\"\n    >\n      {props.len ? fmtIssues(props.number, props.len) : `#${props.number}`}\n    </a>\n  );\n};\n\nexport default IssuesNum;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '@layouts/base';\nimport Author from '@comps/author';\nimport Category from '@comps/category';\nimport IssuesNum from '@comps/issues_num';\nimport '@styles/home.scss';\n\nexport default function IndexPage(props: any) {\n  return (\n    <Layout className=\"home-page\">\n      <div className=\"markdown-body issues-list\">\n        <div>\n          {props.data.allDiscussionsJson.nodes.map(({ node }: any) => {\n            if (!node) return null;\n\n            const category = node?.category;\n\n            return (\n              <div className=\"item\" key={node.number}>\n                <Author\n                  author={node.author}\n                  date={node.updatedAt}\n                  extra={<IssuesNum number={node.number} />}\n                />\n                <div className=\"post-info\">\n                  <Category data={category} />\n                  <Link className=\"title\" to={`/issues/${node.number}`}>\n                    {node.title}\n                  </Link>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  {\n    allDiscussionsJson {\n      nodes {\n        node {\n          number\n          title\n          updatedAt\n          author {\n            avatarUrl\n            login\n            url\n          }\n          category {\n            name\n            isAnswerable\n            emoji\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["props","author","className","title","url","onClick","go","src","avatarUrl","alt","login","date","fmtDate","extra","emojiMap","zap","gear","beer","star","fire","tada","ninja","mega","crab","rocket","warning","unicorn","lobster","cyclone","rainbow","computer","nail_care","sunglasses","see_no_evil","crystal_ball","monocle_face","speech_balloon","exploding_head","hammer_and_wrench","globe_with_meridians","page_facing_up","thinking","sparkling_heart","boom","collision","anger","book","open_book","books","game_die","data","name","Link","to","fmtURI","target","emoji","slice","getEmoji","_link","rgdData","useRgd","type","issues_owner","issues_repo","number","owner","repo","clsx","href","len","fmtIssues","IndexPage","allDiscussionsJson","nodes","map","node","category","key","updatedAt"],"sourceRoot":""}